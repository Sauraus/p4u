#!/bin/bash
#
# Description: holds helper functions for p4 scripts
# Author: Arnon Zilca
#

P4_DEFAULT_CHANGE="default change"

if [[ -z "${UNCOLOR}" ]] && [[ -n "${FORCE_COLORS}" || -t 1 ]]; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    PURPLE=$(tput setaf 5)
    CYAN=$(tput setaf 6)
    NO_COLOR=$(tput sgr0)

    # for sub commands using this helper that want to derive the color trait
    export FORCE_COLORS=1
fi

uncolor() {
    UNCOLOR=1

    BLUE=""
    RED=""
    PURPLE=""
    YELLOW=""
    GREEN=""
    CYAN=""
    NO_COLOR=""
}

promptyn() {
    while true; do
        read -p "$1 " yn >&2
        case ${yn} in
            [Yy]*|"" ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes or no." >&2 ;;
        esac
    done
}

p4-client-name() {
    local CLIENT_NAME_FIELD="Client name: "
    p4 info | grep "${CLIENT_NAME_FIELD}" | sed "s/${CLIENT_NAME_FIELD}//g"
}

p4-client-path() {
    local CLIENT_PATH_FIELD="Client root: "
    p4 info | grep "${CLIENT_PATH_FIELD}" | sed "s/${CLIENT_PATH_FIELD}//g"
}

p4-fix-hostname() {
    CLIENT="$1"
    FORCE="$2"

    client_hostname="$(p4 client -o ${CLIENT} | grep "^Host" | awk '{print $2}')"
    if [[ -n "${client_hostname}" && "${client_hostname}" != "${HOSTNAME}" ]]; then
        echo "Client hostname (${client_hostname}) differs from current hostname (${HOSTNAME})," >&2
        echo "and must be changed in order to continue." >&2
        if [[ -z "${FORCE}" ]]; then
            if ! promptyn "Are you sure you want to continue? (Y/n)"; then
                echo -e "${CYAN}Saved by the bell.${NO_COLOR}" >&2
                exit 0
            fi
        else
            echo "Changing hostname..." >&2
        fi
        p4 client -o ${CLIENT} | sed "/^Host:/ s=${client_hostname}=${HOSTNAME}=" | p4 client -i > /dev/null
    fi
}

p4-pick-changelist() {
    local CHANGELIST_REGEX="Change [0-9]\+ by"
    local CHANGELIST_NUMBER_REGEX="^.*Change \([0-9]\+\) by.*"
    local DEFAULT_REGEX="Default changelist"

    local VERB="$1"
    if [[ -n $2 && $2 -ne 0 ]]; then
        local DEFAULT_CHANGELIST_WARN=1
    fi
    shift 2
    local P4_SHOW_RES="$(p4-show $@)"

    declare -a changelists=()
    declare index=0

    while read line; do
        if echo "${line}" | grep "${CHANGELIST_REGEX}" > /dev/null; then
            ((index += 1))
            echo "(${index}) ${line}" >&2
            changelists[${index}]=$(echo "${line}" | sed "s/${CHANGELIST_NUMBER_REGEX}/\1/")
        else
            echo "${line}" >&2
        fi
    done < <(echo "${P4_SHOW_RES}")

    if [[ ${index} -eq 0 ]]; then
        echo "${RED}No changelists in current client.${NO_COLOR}" >&2
        return 0
    fi

    if [[ -n "${DEFAULT_CHANGELIST_WARN}" ]] && echo "${P4_SHOW_RES}" | grep "${DEFAULT_REGEX}" > /dev/null; then
        if ! promptyn "${YELLOW}Default changelist detected! continue?${NO_COLOR} [Y/n]"; then
            return 0
        fi
    fi

    result=
    if [[ ${index} -eq 1 ]]; then
        if ! promptyn "${VERB} ${changelists[1]}? [Y/n]"; then
            return 0
        fi

        result=1
    else
        while [[ -z "${result}" ]]; do
            read -p "Which changelist to ${VERB}? " chosen >&2
            if [[ ${chosen} -lt 1 || ${chosen} -gt ${index} ]]; then
                echo "Illegal changelist index." >&2
            else
                result="${chosen}"
            fi
        done
    fi

    echo >&2
    echo ${changelists[${result}]}
}
